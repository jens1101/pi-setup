# 1. MAKING THE SYSTEM WORK. DO NOT REMOVE
mount -t tmpfs tmp /run
mkdir -p /run/systemd
mount / -o remount,rw
sed -i 's| init=.*||' /boot/cmdline.txt

# 2. THE USEFUL PART OF THE SCRIPT
# 2.1 Loading the env file
if [[ -f "/boot/.env" ]]; then
    source "/boot/.env"
fi
echo ".env loaded"

# Set timezone
raspi-config nonint do_change_timezone "$TIME_ZONE"
echo "Time zone set"

# 2.2 Enable SSH
raspi-config nonint do_ssh 0
echo "SSH enabled"

# Expand file system
sudo raspi-config nonint do_expand_rootfs
echo "File system expanded"

# Static IP config
tee -a /etc/dhcpcd.conf > /dev/null <<EOT
interface eth0
static ip_address=${IP_ADDRESS}
static routers=${GATEWAY}
static domain_name_servers=${DNS}
EOT
echo "Static IP set"

# 2.3 Set password for user
echo -e "${PASSWORD}\n${PASSWORD}" | passwd ${USERNAME}
echo "Password set"

# 2.4 Auto-mount external HDD
tee -a /etc/fstab > /dev/null <<EOT
# External Media Volume
UUID=${DISK_UUID}    ${MOUNT_POINT}    ntfs-3g    defaults,users,uid=${PUID},gid=${PGID},umask=022,utf8,nofail    0    0
EOT
echo "Fstab configured"

# 2.7 Setup Docker containers
sudo -u ${USERNAME} mkdir -p \
    /home/${USERNAME}/.pihole/etc-pihole/ \
    /home/${USERNAME}/.pihole/etc-dnsmasq.d/ \
    /home/${USERNAME}/.pihole/var-log/ \
    /home/${USERNAME}/.qbittorent/config \
    /home/${USERNAME}/Downloads/ \
    /home/${USERNAME}/docker-setup/
echo "Home directories created"

sudo -u ${USERNAME} touch /home/${USERNAME}/.pihole/var-log/pihole.log
sudo -u ${USERNAME} cp /boot/.env /home/${USERNAME}/docker-setup/
sudo -u ${USERNAME} cp /boot/docker-compose.yml /home/${USERNAME}/docker-setup/
chmod +x /boot/first-boot.sh
sudo -u ${USERNAME} cp /boot/first-boot.sh /home/${USERNAME}/docker-setup/
echo "Files copied"

# Setting up first boot script
touch  /etc/systemd/system/first-boot.service

tee -a /etc/systemd/system/first-boot.service > /dev/null <<EOT
[Unit]
Description=Setup on first boot
[Service]
WorkingDirectory=/home/${USERNAME}/docker-setup/
ExecStart=/home/${USERNAME}/docker-setup/first-boot.sh
User=root
Group=root
[Install]
WantedBy=multi-user.target
EOT
echo "Service file created"

systemctl enable first-boot
echo "Service enabled"

# 3. CLEANING UP AND REBOOTING
sync
umount /boot
mount / -o remount,ro
sync
echo 1 > /proc/sys/kernel/sysrq
echo b > /proc/sysrq-trigger
sleep 5
